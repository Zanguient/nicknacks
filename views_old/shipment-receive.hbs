<style>
.inventorySKU {
    font-size: 11px;
    font-style: italic;
}
.form-textarea {
    width: 100%; max-width: 600px;
}
.headerInfo {
    font-weight: normal;
}
.headerInfoRemarks {
    font-size: 11px;
}
.table .inventoriseTable td {
    padding: 0.2rem;
}
</style>

<table class="table" id="shipment">

    <thead>
        <tr>
            <th><h1>Receive shipment</h1></th>
        </tr>

        <tr>
            <th v-show="shipment.hasArrived">
                <div class="alert alert-warning" role="alert">
                    This shipment has already been received! No actions can be taken here.
                </div>
            </th>
        </tr>
    </thead>

    <tbody>

        <tr>
            <td><table class="table">
                <thead class="thead-light">
                    <tr>
                        <th colspan="4">
                            ID: <span class="headerInfo">\{{ shipment.ShipmentID }}</span><br>
                            Name: <span class="headerInfo">\{{ shipment.name }}</span><br>
                            Estimated ship out: <span class="headerInfo">\{{ shipment.estimatedShipOut | moment }}</span><br>

                            Actual ship out:
                            <span class="headerInfo" v-if="shipment.actualShipOut">\{{ shipment.actualShipOut | moment }}</span>
                            <span class="headerInfo" v-else>N.A.</span><br>

                            Expected arrival: <span class="headerInfo">\{{ shipment.expectedArrival | moment }}</span><br>

                            Actual arrival:
                            <span class="headerInfo" v-if="shipment.hasArrived">\{{ shipment.actualArrival | moment }}</span>
                            <span class="headerInfo" v-else>N.A.</span><br>

                            Other info: <span class="headerInfo headerInfoRemarks">\{{ shipment.otherInfo }}</span><br>
                        </th>
                    </tr>

                    <tr>
                        <th>No.</th>
                        <th>Product</th>
                        <th>Qty</th>
                        <th>Inventorise</th>
                    </tr>

                </thead>

                <tbody>

                    <tr v-for="(product, productIndex) in shipment.products">
                        <td>\{{ productIndex + 1}}</td>
                        <td>
                            \{{ product.name }} <br>
                            <span class="inventorySKU">\{{ product.sku }}</span><br>
                            <span class="inventorySKU">ID: \{{ product.InventoryID }}</span>
                        </td>
                        <td>\{{ product.quantity }}</td>

                        <td>
                            <div v-if="!product.quantityMatched" class="alert alert-warning" role="alert">
                                The quantity you inventorise does not match the quantity shipped.
                            </div>
                            <div v-else class="alert alert-success" role="alert">
                                Quantity to inventorised is matched with quantity shipped
                            </div>
                            <table class="table inventoriseTable">

                                <tr v-for="toInventorise in product.toInventorise">
                                    <td>\{{ toInventorise.name }}</td>
                                    <td><input class="form-control" min="0" type="number" v-model="toInventorise.quantity" v-on:keyup="inventoriseTotalCheck(productIndex)"></td>
                                </tr>

                            </table>
                        </td>

                    </tr>


                </tbody>

                <tfooter>
                    <tr>
                        <td colspan="4" v-if="shipment.hasArrived">
                            <div class="alert alert-warning" role="alert">
                                This shipment has already been received! No actions can be taken here.
                            </div>
                        </td>

                        <td colspan="4" v-else>

                            <label class="label" for="actualArrival">Select actual arrival:</label>
                            <p>
                                <el-date-picker required type="date" name="actualArrival" v-model="shipment.actualArrival" placeholder="Select date"></el-date-picker><br>
                                <textarea required class="form-control form-textarea" placeholder="Enter arrival info here" v-model="shipment.arrivalDetails"></textarea>
                                <div v-if="!shipment.quantityMatched" class="alert alert-warning" role="alert">
                                    You cannot submit because the quantities to inventorise does not match the quantity shipped.
                                </div>
                                <button v-else type="button" class="btn btn-success" v-bind:disabled="submitIsDisabled" v-on:click="inventoriseShipment">Inventorise!</button>
                            </p>
                        </td>
                    </tr>
                </tfooter>

            </table></td>
        </tr>

    </tbody>
</table>
<script>

Vue.component('v-select', VueSelect.VueSelect)

new Vue({
    el: '#shipment',
    data: {
        shipment: {
            ShipmentID: null,
            actualShipOut: null,
            shipOutDetails: null,
            products: [{
                ID: null,
                name: null,
                sku: null,
                quantity: null,
                toInventorise: [{
                    storageLocationID: null, quantity: null
                }],
                quantityMatched: false
            }],
            quantityMatched: false
        },
        storageLocations: [],
        submitIsDisabled: false
    },
    created() {

        var self = this;

        axios.all([

            // get shipment info
            axios.get('/api/v2/shipment/one/{{ shipmentID }}').then(response => {
                if (!response.data.success) Prompt.it(response.data.error);

                //this.shipment = response.data.shipment;
                if (response.data.shipment.hasArrived) Prompt.it('You have already inventorised this shipment. Nothing can be done here.');
                return response.data.shipment
            }),

            // get all storage location info
            axios.get('/api/v2/storage-location/all').then(response => {
                if (!response.data.success) Prompt.it(response.data.error);

                //this.storageLocations = response.data.storageLocations;
                return response.data.storageLocations;
            })
        ]).then( axios.spread((shipment, storageLocations) => {

            // to add a template storageLocation and quantity pairing
            shipment.products.forEach(function(product) {
                storageLocations.forEach(function(storageLocation) {
                    if (!product.toInventorise) product.toInventorise = [];
                    product.toInventorise.push({
                        StorageLocationID: storageLocation.StorageLocationID,
                        name: storageLocation.name,
                        quantity: 0
                    });
                });

                product.quantityMatched = false;
            });

            shipment.quantityMatched = false;


            console.log(shipment);
            console.log(storageLocations);

            this.shipment = shipment;
            this.storageLocations = storageLocations;

        }));

    },
    methods: {
        inventoriseTotalCheck(index) {
            let product = this.shipment.products[index];
            let counter = 0;
            product.toInventorise.forEach(function(inventoriseLine) {
                counter += ( isNaN(parseInt(inventoriseLine.quantity)) ? 0 : parseInt(inventoriseLine.quantity) );
            });

            if (parseInt(counter) === parseInt(product.quantity)) {

                product.quantityMatched = true;

                // loop through all the quantities of products to inventorise.
                // if all the quantities matched up, the overall shipment quantities (`this.shipment.quantityMatched`) will be set to true
                this.shipment.products.forEach(product => {
                    this.shipment.quantityMatched = product.quantityMatched;
                });

            } else {
                product.quantityMatched = this.shipment.quantityMatched = false;
            }
        },
        inventoriseShipment() {

            this.submitIsDisabled = true;

            const payload = {};

            payload.ShipmentID = this.shipment.ShipmentID;
            payload.arrivalDetails = this.shipment.arrivalDetails;
            payload.actualArrival = this.shipment.actualArrival;
            payload.products = [];

            // loop through each product to clean up the inventorise numbers.
            this.shipment.products.forEach(product => {

                payload.products.push({
                    InventoryID: product.InventoryID,
                    toInventorise: product.toInventorise
                })

            });

            if(_check(payload.actualArrival) === false) {
                let msg = 'You need to enter arrival date.';
                Prompt.it(msg); this.submitIsDisabled = false; throw new Error(msg);
            }

            payload.actualArrival = moment.utc(moment(payload.actualArrival).startOf('day').format('LL')).valueOf();

            console.log(payload);

            axios.post('/api/v2/shipment/arrive', payload).then(response => {
                if (!response.data.success) {
                    Prompt.it(response.data.error.message);
                    this.submitIsDisabled = false;
                    return;
                }
                console.log(response.data);
                Prompt.it('Shipment is inventorised!');
            }).catch(error => {
                Prompt.it(error.message);
                this.submitIsDisabled = false;
            })

            function _check(suspect) {
                if ([null, false, undefined].indexOf(suspect) !== -1) return false;
                if (suspect.length === 0) return false;
                return true;
            }
        }
    },
    filters: {
        moment(date) {
            if (['string', 'number'].indexOf(typeof date) !== -1) return moment(parseInt(date)).format('DD MMM YY');
            return moment(date).format('DD MMM YY');
        }
    }
});
</script>
