<style>
.inventorySKU {
    font-size: 11px;
    font-style: italic;
}
.form-textarea {
    width: 100%; max-width: 600px;
}
.headerInfo {
    font-weight: normal;
}
.headerInfoRemarks {
    font-size: 11px;
}
</style>

<table class="table table-striped" id="shipment">

    <thead>
        <tr>
            <th><h1>Ship out</h1></th>
        </tr>

        <tr>
            <th v-if="shipment.actualShipOut">
                <div class="alert alert-warning" role="alert">
                    This shipment is already shipped out! No actions can be taken here.
                </div>
            </th>

            <th v-else>

                <label class="label" for="actualShipOut">Select actual ship out:</label>
                <p>
                    <el-date-picker required type="date" name="actualShipOut" v-model="shipment.actualShipOut" placeholder="Select date"></el-date-picker><br>
                    <textarea required class="form-control form-textarea" placeholder="Enter ship out info here" v-model="shipment.shipOutDetails"></textarea>
                    <button v-show="!shipment.actualShipOut" type="button" class="btn btn-success" v-on:click="submitShipOut" v-bind:disabled="submitIsDisabled">Ship!</button>
                </p>
            </th>
        </tr>
    </thead>

    <tbody>

        <tr>
            <td><table class="table">
                <thead class="thead-light">
                    <tr>
                        <th colspan="3">
                            ID: <span class="headerInfo">\{{ shipment.ShipmentID }}</span><br>
                            Name: <span class="headerInfo">\{{ shipment.name }}</span><br>
                            Estimated ship out: <span class="headerInfo">\{{ shipment.estimatedShipOut | moment }}</span><br>

                            Actual ship out:
                            <span class="headerInfo" v-if="shipment.actualShipOut">\{{ shipment.actualShipOut | moment }}</span>
                            <span class="headerInfo" v-else>N.A.</span><br>

                            Expected arrival: <span class="headerInfo">\{{ shipment.expectedArrival | moment }}</span><br>

                            Actual arrival:
                            <span class="headerInfo" v-if="shipment.hasArrived">\{{ shipment.actualArrival | moment }}</span>
                            <span class="headerInfo" v-else>N.A.</span><br>

                            Other info: <span class="headerInfo headerInfoRemarks">\{{ shipment.otherInfo }}</span><br>
                        </th>
                    </tr>

                    <tr>
                        <th>No.</th>
                        <th>Product</th>
                        <th>Qty</th>
                    </tr>

                </thead>

                <tbody>

                    <tr v-for="(product, index) in shipment.products">
                        <td>\{{ index + 1}}</td>
                        <td>\{{ product.name }} <br> <span class="inventorySKU">\{{ product.sku }}</span></td>
                        <td>\{{ product.quantity }}</td>
                    </tr>


                </tbody>

                <tfooter>
                </tfooter>

            </table></td>
        </tr>

    </tbody>
</table>
<script>

Vue.component('v-select', VueSelect.VueSelect)

new Vue({
    el: '#shipment',
    data: {
        shipment: {
            ShipmentID: null,
            actualShipOut: null,
            shipOutDetails: null
        },
        submitIsDisabled: false
    },
    created() {
        axios.get('/api/v2/shipment/one/{{ shipmentID }}').then(response => {
            if (!response.data.success) Prompt.it(response.data.error);
            console.log(response.data);
            this.shipment = response.data.shipment;
            if (this.shipment.actualShipOut !== null) {
                this.shipment.hasShippedOut = true;
                let msg = 'This shipment is already shipped out! No actions can be taken here.';
                Prompt.it(msg);
            }
        }).catch(error => {
            Prompt.it(error);
        })
    },
    methods: {
        submitShipOut() {

            submitIsDisabled = true;

            const payload = {};

            payload.ShipmentID = this.shipment.ShipmentID;
            payload.shipOutDetails = this.shipment.shipOutDetails;
            payload.actualShipOut = this.shipment.actualShipOut

            if(_check(payload.shipOutDetails) === false) {
                let msg = 'You need to enter ship out details.';
                Prompt.it(msg); submitIsDisabled = false; throw new Error(msg);
            }

            if(_check(payload.actualShipOut) === false) {
                let msg = 'You need to enter ship out date.';
                Prompt.it(msg); submitIsDisabled = false; throw new Error(msg);
            }

            payload.actualShipOut = this.shipment.actualShipOut = moment.utc(moment(payload.actualShipOut).startOf('day').format('LL')).valueOf();

            axios.post('/api/v2/shipment/shipout', payload).then(response => {
                if (!response.data.success) Prompt.it(response.data.error);
                console.log(response.data);
                Prompt.it('Shipment is shipped!');

            }).catch(error => {
                submitIsDisabled = false;
                Prompt.it(error);
            })

            function _check(suspect) {
                if ([null, false, undefined].indexOf(suspect) !== -1) return false;
                if (suspect.length === 0) return false;
                return true;
            }


        }
    },
    filters: {
        moment(date) {
            if (['string', 'number'].indexOf(typeof date) !== -1) return moment(parseInt(date)).format('DD MMM YY');
            return moment(date).format('DD MMM YY');
        }
    }
});
</script>
