
    <h1>Inventory</h1>
    <table class="table-striped">
        <tr>
            <th>Name/SKU/COGS</th>
            <th>Quantity/Location</th>
            <th>Update</th>
        </tr>

        <tr id="inventory-quick-add-tr">
            <form id="inventory-quick-add">
                <td><input type="text" class="form-control" id="inventory-quick-add-name" name="name" placeholder="name"><br>
                <input type="text" class="form-control" id="inventory-quick-add-sku" name="sku" placeholder="sku"><br>
                <input type="text" class="form-control" id="inventory-quick-add-cogs" name="cogs" placeholder="cogs">
                <td>
                    <style>
                    .quantity-table {
                        font-size: 10px;
                    }
                    .quantity-table td {
                        padding: 2px;
                    }
                    .quantity-table input.inventory-quick-add-qty {
                        width: 45px;
                        font-size: 10px;
                        padding: 2px;
                        height: 24px;
                    }
                    </style>
                    <table class="table-striped quantity-table">
                        <tr>
                            <th>Qty:</th>
                            <th>Loc:</th>
                        </tr>

                        {{#each data.storageLocations}}
                        <tr>
                            <td><input data-storage-location-id="{{this.StorageLocationID}}" data-storage-location-name="{{this.name}}" type="number" class="form-control inventory-quick-add-qty" placeholder="qty"></td>
                            <td>{{this.name}}</td>
                        </tr>
                        {{/each}}
                    </table>
                </td>
                <td><button id="inventory-quick-add-submit-button" type="submit" class="btn btn-primary">Add</button><span id="inventory-quick-add-submitting" style="display:none;">Submitting</span></td>
            </form>
        </tr>

        <style>
        input.edit-inactive {
            border: 0px;
            background: transparent;
        }
        .quantity-table {
            font-size: 9px;
        }
        .quantity-table td, .quantity-table th {
            padding: 0px;
        }
        .quantity-table input.inventory-item-editable {
            width: 45px;
            font-size: 10px;
            padding: 2px;
            height: 24px;
        }
        input[disabled] {
            color: #000;
        }
        </style>
        </style>

        {{#each data.inventories}}
            <tr class="inventory-items">
                <form>
                    <input type="hidden" name="InventoryID" value="{{this.InventoryID}}">
                    <td>
                        <input style="width: 300px;" type="text" disabled class="inventory-item-editable edit-inactive" name="name" value="{{this.name}}"><br>
                        <input style="font-style: italic; width: 300px;"; type="text" disabled class="inventory-item-editable edit-inactive" name="sku" value="{{this.sku}}"><br>
                        COGS: <input style="display: inline; width: 90px;" type="text" disabled class="inventory-item-editable edit-inactive" name="cogs" value="{{this.cogs}}">
                    </td>
                    <td>

                        <table class="table-striped quantity-table">
                            <tr>
                                <th>Qty:</th>
                                <th>Loc:</th>
                            </tr>
                            {{#each this.stock}}
                                <tr>
                                    <td>
                                        <input data-storage-location-id="{{this.StorageLocationID}}" disabled type="text" class="inventory-item-editable edit-inactive" data-storage-location-name="{{this.name}}" value="{{this.quantity}}">

                                    </td>
                                    <td><span class="inventory-item-display">{{this.name}}</span></td>
                                </tr>
                            {{/each}}
                        </table>

                    </td>
                    <td>
                        <button class="btn btn-primary inventory-item-edit">Edit</button>

                        <span class="inventory-edit-buttons" style="display: none;">
                            <button class="btn btn-primary inventory-item-cancel">Cancel</button>

                            <button type="submit" class="btn btn-primary inventory-item-submit">Update</button>

                            <button data-sku="{{this.sku}}" data-inventory-id="{{this.InventoryID}}" class="btn btn-danger inventory-item-del">Del</button>
                        </span>


                        <span class="inventory-item-submitting" style="display:none;">Submitting</span></td>
                </form>


            </tr>
        {{/each}}

    </table>

    <script>

    var inventoryClickListeners = {
        bind: function(array) {

            var self = this;

            array.forEach(function(element) {
                element.dom.on('click', self['_' + element.action]);
            })
        },
        _cancel: function(event) {

            event.preventDefault();

            var self = this;
            var $formRow = $(this).closest('.inventory-items');
            var $form = $formRow.find('form');
            var $editButtons = $formRow.find('.inventory-edit-buttons');
            var $editButton = $formRow.find('.inventory-item-edit');


            $editButtons.hide();
            $editButton.show();

            $formRow.find('input.inventory-item-editable').each(function(index, element) {
                $(element).attr('disabled', 'disabled').addClass('edit-inactive').removeClass('form form-control');
            });

            $form.off('submit');
        },
        _edit: function(event) {
            event.preventDefault();

            var self = this;
            var $formRow = $(this).closest('.inventory-items');
            var $form = $formRow.find('form');
            var $editButtons = $formRow.find('.inventory-edit-buttons');
            var $submittingSpan = $formRow.find('.inventory-item-submitting')

            $(self).hide();
            $editButtons.show();

            $formRow.find('input.inventory-item-editable').each(function(index, element) {

                if ($(element).attr('data-storage-location-name') === "Sold") return;
                $(element).removeAttr('disabled').removeClass('edit-inactive').addClass('form form-control');
            });

            $form.submit(function(event) {
                event.preventDefault();

                var formData = $form.serializeJSON();

                var $formRow = $(this).closest('tr');

                var $quantityTable = $formRow.find('.quantity-table');

                var quantityArray = [];

                $quantityTable.find('input').each(function(element, index) {

                    if($(this).attr('data-storage-location-name') === "Sold") return;

                    var obj = {}

                    obj.Inventory_StorageID = $(this).attr('data-inventory-storage-id');

                    obj.StorageLocation_storageLocationID = $(this).attr('data-storage-location-id');

                    if(parseInt($(this).val()) === NaN) return alert('Invalid quantity');
                    obj.quantity = parseInt($(this).val()) ? parseInt($(this).val()) : 0;

                    quantityArray.push(obj);
                });

                formData.storageAndQuantities = quantityArray;

                $submittingSpan.show();
                $editButtons.hide();

                var post = $.ajax({
                    type: "POST",
                    url: "/api/v1/inventory/update",
                    data: formData
                });

                post.done(function(data) {

                    if(data.success) {
                        alert('success!');
                        // add the row.
                        console.log(data.inventory);
                        return;
                    }


                    alert(D.get(data, 'error.message'));
                    console.log(D.get(data, 'error.debug'));

                });

                post.fail(function(data) {
                    console.log(data)
                    alert(D.get(data, 'responseJSON.error.message'));
                    console.log(D.get(data, 'responseJSON.error.debug'));
                });


                post.always(function() {

                    $submittingSpan.hide();
                    $editButtons.hide();

                    $(self).show();

                    $formRow.find('input.inventory-item-editable').each(function(index, element) {
                        $(element).attr('disabled', 'disabled').addClass('edit-inactive').removeClass('form form-control');
                    });

                });

            });
        },
        _delete: function(event) {
            event.preventDefault();

            var self = this;
            var $formRow = $(this).closest('.inventory-items');
            var $editButtons = $formRow.find('.inventory-edit-buttons');
            var $submittingSpan = $formRow.find('.inventory-item-submitting')

            var p = prompt("You are deleting a product inventory. This change is irreversible. Please type the sku \"" + $(this).attr('data-sku') + "\" to confirm:");
            if (p !== $(this).attr('data-sku')) return alert('You have enterred the wrong input or cancelled. Please try again.');

            var post = $.ajax({
                type: "DELETE",
                url: "/api/v1/inventory/delete",
                data: { InventoryID: $(self).attr('data-inventory-id') }
            });

            $editButtons.hide();
            $submittingSpan.show();

            post.done(function(data) {

                if(data.success) {
                    alert('success!');
                    // delete the row.

                    $formRow.slideUp('fast', function() {
                        $formRow.remove();
                    });

                    return;
                }


                alert(D.get(data, 'error.message'));
                console.log(D.get(data, 'error.debug'));

            });

            post.fail(function(data) {
                console.log(data)
                alert(D.get(data, 'responseJSON.error.message'));
                console.log(D.get(data, 'responseJSON.error.debug'));
            });


            post.always(function() {

                $submittingSpan.hide();
                $editButtons.hide();
                $(self).show();

                $formRow.find('input.inventory-item-editable').each(function(index, element) {
                    $(element).attr('disabled', 'disabled').addClass('edit-inactive').removeClass('form form-control');
                });

            });
        }

    }

    inventoryClickListeners.bind([
        {
            dom: $('.inventory-item-cancel'),
            action: 'cancel'
        }, {
            dom: $('.inventory-item-edit'),
            action: 'edit'
        }, {
            dom: $('.inventory-item-del'),
            action: 'delete'
        }
    ]);
    </script>

    <script>
    $('#inventory-quick-add').submit(function(event) {

        event.preventDefault();

        var self = this;
        var $submittingSpan = $('#inventory-quick-add-submitting');
        var $submitButton = $('#inventory-quick-add-submit-button');
        var $formRow = $(this).closest('tr');

        var formData = $(this).serializeJSON();

        // get the storage+quantity array
        // intentionally left out the name to escapte #serialzeJSON
        // because it won't work on object nesting in arrays.
        var $quantityTable = $formRow.find('.quantity-table');

        var storageAndQuantities = [];

        $quantityTable.find('input').each(function(element, index) {

            var obj = {
                StorageLocationID: $(this).attr('data-storage-location-id')
            }

            if(parseInt($(this).val()) === NaN) return alert('Invalid quantity');

            obj.quantity = parseInt($(this).val()) ? parseInt($(this).val()) : 0;

            storageAndQuantities.push(obj);
        });


        formData.storageAndQuantities = storageAndQuantities;

        $submittingSpan.show();
        $submitButton.hide();

        var post = $.ajax({
            type: "PUT",
            url: "/api/v1/inventory/add",
            data: formData
        });

        post.done(function(data) {

            if(data.success) {
                alert('success!');
                // add the row.
                console.log(data.inventory);
                return;
            }


            alert(D.get(data, 'error.message'));
            console.log(D.get(data, 'error.debug'));

        });

        post.fail(function(data) {
            console.log(data)
            alert(D.get(data, 'responseJSON.error.message'));
            console.log(D.get(data, 'responseJSON.error.debug'));
        });


        post.always(function() {

            $submittingSpan.hide();
            $submitButton.show();

        });
    });
    </script>
