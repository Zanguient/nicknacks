<style>
.inventorySKU {
    font-size: 11px;
    font-style: italic;
}
.form-text {
    width: 100%; max-width: 220px;
}
.form-textarea {
    width: 100%; max-width: 600px;
}
.headerInfo {
    font-weight: normal;
}
.headerInfoRemarks {
    font-size: 11px;
}
</style>

<table class="table table-striped">

    <thead>
        <tr>
            <th><h1>Create shipment</h1></th>
        </tr>

        <tr>
            <td><form id="addTransitShipmentForm" v-on:submit.prevent="addTransitShipment"><table class="table">
                <thead>
                    <tr>
                        <th colspan="3">
                            <label class="label" for="name">Name:</label>
                            <p>
                                <input required class="form-control form-text" type="text" name="name" v-model="shipment.name">
                            </p>

                            <label class="label" for="estimatedShipOut">Estimated ship out:</label>
                            <p>
                                <el-date-picker required type="date" name="estimatedShipOut" v-model="shipment.estimatedShipOut" placeholder="Select date"></el-date-picker><br>
                            </p>

                            <label class="label" for="expectedArrival">Expected arrival:</label>
                            <p>
                                <el-date-picker required type="date" name="expectedArrival" v-model="shipment.expectedArrival" placeholder="Select date"></el-date-picker><br>
                            </p>

                            <label class="label" for="remarks">Other info:</label>
                            <p>
                                <textarea class="form-control form-textarea" name="otherInfo" v-model="shipment.remarks"></textarea>
                            </p>
                        </th>
                    </tr>

                    <tr>
                        <th>No.</th>
                        <th>Product</th>
                        <th>Qty</th>
                    </tr>

                </thead>

                <tbody>

                    <tr v-for="(product, index) in shipment.products">
                        <td>\{{ index + 1 }}</td>
                        <td>
                            <v-select v-model="product.data" label="searchString" :options="inventories">
                                <template slot="option" slot-scope="option">
                                    \{{ option.name }}<br>
                                    <span class="inventorySKU">\{{ option.sku }}</span>
                                </template>
                            </v-select>
                        </td>
                        <td><input type="number" v-model="product.quantity"></td>
                    </tr>

                </tbody>

                <tfooter>

                    <tr id="shipmentProductAddRow">
                        <td colspan="3" style="text-align: center;"><button type="button" @click="addProduct" class="shipmentProductAddButton btn btn-default">+ Add Product</button>
                        </td>

                    </tr>

                    <tr>
                        <td colspan="3" style="text-align: center;"><button type="submit" class="addShipmentButton btn btn-success" v-bind:disable="submitIsDisabled">Add Shipment</button>
                        </td>
                    </tr>
                </tfooter>

            </table></form></td>
        </tr>
    </thead>

    <tbody>

    </tbody>
</table>
<script>

Vue.component('v-select', VueSelect.VueSelect)

new Vue({
    el: '#addTransitShipmentForm',
    data: {
        shipment: {
            name: '',
            estimatedShipOut: '',
            expectedArrival: '',
            remarks: '',
            products: []
        },
        inventories: [{}],
        submitIsDisabled: false
    },
    created() {
        axios.get('/api/v2/inventory/all').then(response => {
            if (!response.data.success) Prompt.it(response.data.error);
            this.inventories = response.data.data;
        }).catch(error => {
            Prompt.it(error);
        })
    },
    methods: {
        addProduct() {
            this.shipment.products.push({
                quantity: 1
            });
        },
        addTransitShipment() {

            this.submitIsDisabled = true;

            const payload = Object.assign({}, this.shipment);
            if (this.shipment.products.length === 0) {
                this.submitIsDisabled = false;
                return Prompt.it('You have not specified any product for the shipment.');
            }


            const productIDArray = []
            const products = this.shipment.products.reduce(function(filtered, product) {
                if (!product.data.InventoryID) return filtered;
                if (product.quantity === 0 || product.quantity === "0") {
                    let msg = 'You have specified a quantity of ' + product.data.name + ' to be ZERO. Please rectify.';
                    this.submitIsDisabled = false;
                    Prompt.it(msg);
                    throw new Error(msg);
                }

                if (productIDArray.indexOf(product.data.InventoryID) === -1) {
                    productIDArray.push(product.data.InventoryID);
                } else {
                    let msg = 'You have included the product "' + product.data.name + '" more than once. Duplication is not allowed.';
                    this.submitIsDisabled = false;
                    Prompt.it(msg);
                    throw new Error(msg);
                }
                filtered.push({
                    InventoryID: product.data.InventoryID,
                    quantity: product.quantity
                });
                return filtered;
            }, []);

            // re-assign products with the simplified products array.
            payload.products = products;

            // verify dates and also format to unix.
            if (!payload.estimatedShipOut || !payload.estimatedShipOut || payload.estimatedShipOut.length === 0 || payload.expectedArrival.length === 0) {
                let msg = 'Dates are not completely filled.';
                this.submitIsDisabled = false;
                Prompt.it(msg);
                throw new Error(msg);
            }
            payload.estimatedShipOut = moment.utc(moment(payload.estimatedShipOut).startOf('day').format('LL')).valueOf();
            payload.expectedArrival = moment.utc(moment(payload.expectedArrival).startOf('day').format('LL')).valueOf();

            axios.post('/api/v2/shipment/create', payload).then(response => {
                if (!response.data.success) {
                    Prompt.it(response.data.error);
                    this.submitIsDisabled = false;
                }

                Prompt.it('Shipment added!');

                window.location.replace('/panel/shipment');

            }).catch(error => {
                Prompt.it(error);
            })

        }
    }
});
</script>
